<?php

/**
 * @file
 * The Composite reference test module.
 */

declare(strict_types=1);

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 */
function composite_reference_test_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'entity_test') {
    $fields = [];

    // Create a reference field to node entities so that the system has a ref
    // field to node from an entity type that is not revisionable. This is
    // because when we delete a referenced entity (in this case a node), we
    // check if there is no other entity that references it, in any of the
    // previous revisions. So if we have an entity type that is not
    // revisionable, we cannot use `allRevisions` in the query.
    // @see CompositeReferenceFieldManager::getReferencingEntities().
    $fields['non_rev_entity_type_reference_field'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('No rev entity type ref field'))
      ->setDescription(t('No rev entity type ref field'))
      ->setSettings([
        'target_type' => 'node',
      ]);

    return $fields;
  }

  if ($entity_type->id() !== 'node') {
    return [];
  }

  $fields = [];

  $fields['entity_reference'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Simple entity reference'))
    ->setDescription(t('Simple entity reference field'))
    ->setSettings([
      'target_type' => 'node',
      'composite_reference' => [
        'composite' => TRUE,
        'composite_revisions' => FALSE,
      ],
    ]);

  $fields['entity_reference_revisions'] = BaseFieldDefinition::create('entity_reference_revisions')
    ->setLabel(t('Entity reference revisions'))
    ->setDescription(t('Entity reference revisions field'))
    ->setSettings([
      'target_type' => 'node',
      'composite_reference' => [
        'composite' => TRUE,
        'composite_revisions' => FALSE,
      ],
    ]);

  $fields['entity_reference_composite_revisions'] = BaseFieldDefinition::create('entity_reference_revisions')
    ->setLabel(t('Entity reference composite revisions'))
    ->setDescription(t('Entity reference composite revisions field'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'target_type' => 'node',
      'composite_reference' => [
        'composite' => TRUE,
        'composite_revisions' => TRUE,
      ],
    ]);

  return $fields;
}

/**
 * Implements hook_query_TAG_alter().
 */
function composite_reference_test_query_node_access_alter(AlterableInterface $query) {
  $group = $query->andConditionGroup()->condition('node_field_data.nid', '0', '=');
  $query->innerJoin('node_field_data', NULL, $group);
}
